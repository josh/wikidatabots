name: TMDB ETL

on:
  schedule:
    - cron: "0 8 * * *"
    - cron: "0 16 * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    concurrency: tmdb_changes_${{ matrix.type }}
    if: github.event.schedule == '0 8 * * *' || github.event.schedule == '0 16 * * *' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "movie"
          - type: "tv"
          - type: "person"

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r <(grep -E 'fsspec|pandas|pyarrow' requirements.txt)

      - name: Set Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >>"$GITHUB_ENV"

      - name: Download from S3
        run: |
          aws s3 cp "s3://$BUCKET_NAME/tmdb/${TYPE}/changes.arrow" "changes.arrow"
          cp changes.arrow changes.arrow~
        env:
          BUCKET_NAME: wikidatabots
          TYPE: ${{ matrix.type }}

      - name: Fetch recent TMDB changes
        shell: bash
        run: |
          curl_config() {
            for N in $(seq 0 6); do
              START_DATE=$(date --date="today -$N day" +%Y-%m-%d)
              END_DATE=$(date --date="today -$N day +1 day" +%Y-%m-%d)
              URL="https://api.themoviedb.org/3/${TYPE}/changes?api_key=$TMDB_API_KEY&start_date=$START_DATE&end_date=$END_DATE"
              echo "url = \"$URL\""
              echo "output = \"$RUNNER_TEMP/changes/$START_DATE.json\""
            done
          }
          mkdir -p "$RUNNER_TEMP/changes/"
          curl_config | tee "$RUNNER_TEMP/curl_config.txt"
          curl --fail --no-progress-meter --config "$RUNNER_TEMP/curl_config.txt"
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          TYPE: ${{ matrix.type }}

      - name: Append TMDB changes
        run: |
          python tmdb_append_changes.py changes.arrow "$RUNNER_TEMP/changes"

      - name: Print stats
        run: |
          python print_table_stats.py changes.arrow

      - name: Print diff
        run: |
          python print_table_diff.py changes.arrow~ changes.arrow

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.type }}-changes-export
          path: |
            *.arrow
          retention-days: 7

      - name: Upload to S3
        run: |
          aws s3 cp "changes.arrow" "s3://$BUCKET_NAME/tmdb/${TYPE}/changes.arrow"
        env:
          BUCKET_NAME: wikidatabots
          TYPE: ${{ matrix.type }}

  external_ids:
    needs: changes
    runs-on: ubuntu-latest
    concurrency: tmdb_external_ids_${{ matrix.type }}
    if: github.event.schedule == '0 8 * * *' || github.event.schedule == '0 16 * * *' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "movie"
          - type: "tv"
          - type: "person"

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >>"$GITHUB_ENV"

      - name: Download from S3
        run: |
          aws s3 cp "s3://$BUCKET_NAME/tmdb/${TYPE}/changes.arrow" "changes.arrow"
          aws s3 cp "s3://$BUCKET_NAME/tmdb/${TYPE}/external_ids.arrow" "external_ids.arrow"
          cp external_ids.arrow external_ids.arrow~
        env:
          BUCKET_NAME: wikidatabots
          TYPE: ${{ matrix.type }}

      - name: Get changed IDs
        id: tmdb_external_ids_outdated
        run: |
          python tmdb_external_ids_outdated.py external_ids.arrow changes.arrow >"$RUNNER_TEMP/changed_ids.txt"
          count=$(wc -l <"$RUNNER_TEMP/changed_ids.txt")
          echo "count=$count" | tee --append "$GITHUB_OUTPUT"

      - name: Generate changed curl config
        shell: bash
        run: |
          curl_config() {
            while read -r ID; do
              URL="https://api.themoviedb.org/3/${TYPE}/$ID/external_ids?api_key=$TMDB_API_KEY"
              echo "url = \"$URL\""
              echo "output = \"$RUNNER_TEMP/external_ids/$ID.json\""
            done
          }
          mkdir -p "$RUNNER_TEMP/external_ids/"
          curl_config <"$RUNNER_TEMP/changed_ids.txt" | tee "$RUNNER_TEMP/curl_config.txt"
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          TYPE: ${{ matrix.type }}

      - name: Fetch changed TMDB external IDs
        if: steps.tmdb_external_ids_outdated.outputs.count > 0
        run: |
          curl --no-progress-meter --config "$RUNNER_TEMP/curl_config.txt"

      - name: Get backfill IDs
        id: tmdb_external_ids_backfill
        run: |
          python tmdb_external_ids_backfill.py external_ids.arrow >"$RUNNER_TEMP/backfill_ids.txt"
          count=$(wc -l <"$RUNNER_TEMP/backfill_ids.txt")
          echo "count=$count" | tee --append "$GITHUB_OUTPUT"

      - name: Generate changed curl config
        shell: bash
        run: |
          curl_config() {
            while read -r ID; do
              URL="https://api.themoviedb.org/3/${TYPE}/$ID/external_ids?api_key=$TMDB_API_KEY"
              echo "url = \"$URL\""
              echo "output = \"$RUNNER_TEMP/external_ids/$ID.json\""
            done
          }
          mkdir -p "$RUNNER_TEMP/external_ids/"
          curl_config <"$RUNNER_TEMP/backfill_ids.txt" | tee "$RUNNER_TEMP/curl_config.txt"
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          TYPE: ${{ matrix.type }}

      - name: Fetch changed TMDB external IDs
        if: steps.tmdb_external_ids_backfill.outputs.count > 0
        run: |
          curl --no-progress-meter --config "$RUNNER_TEMP/curl_config.txt"

      - name: Run script
        run: |
          python tmdb_update_external_ids.py "external_ids.arrow" "$RUNNER_TEMP/external_ids"
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

      - name: Print stats
        run: |
          python print_table_stats.py external_ids.arrow

      - name: Print diff
        run: |
          python print_table_diff.py external_ids.arrow~ external_ids.arrow id

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.type }}-external_ids-export
          path: |
            *.arrow
          retention-days: 7

      - name: Upload to S3
        run: |
          aws s3 cp "external_ids.arrow" "s3://$BUCKET_NAME/tmdb/${TYPE}/external_ids.arrow"
        env:
          BUCKET_NAME: wikidatabots
          TYPE: ${{ matrix.type }}
