name: TMDB ETL

on:
  schedule:
    - cron: "0 8,16 * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    concurrency: tmdb_changes_${{ matrix.type }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "movie"
          - type: "tv"
          - type: "person"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >>"$GITHUB_ENV"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Download from S3
        run: |
          aws s3 cp "s3://wikidatabots/tmdb/${TYPE}/changes.arrow" "changes.arrow"
          aws s3 cp "s3://wikidatabots/tmdb/${TYPE}/latest_changes.arrow" "latest_changes.arrow"
          cp changes.arrow changes.arrow~
          cp latest_changes.arrow latest_changes.arrow~
        env:
          TYPE: ${{ matrix.type }}

      - name: Run ETL changes script
        shell: python
        run: |
          import os

          from pandas_utils import update_feather
          from tmdb_etl import insert_tmdb_changes

          tmdb_type = os.environ["TYPE"]
          update_feather("changes.arrow", lambda df: insert_tmdb_changes(df, tmdb_type=tmdb_type))
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          TYPE: ${{ matrix.type }}

      - name: Run ETL latest changes script
        shell: python
        run: |
          import pandas as pd

          from tmdb_etl import tmdb_latest_changes

          df = pd.read_feather("changes.arrow")
          df = tmdb_latest_changes(df)
          df.to_feather("latest_changes.arrow")

      - name: Print stats
        run: |
          python print_table_stats.py changes.arrow

      - name: Print stats
        run: |
          python print_table_stats.py latest_changes.arrow

      - name: Print diff
        run: |
          python print_table_diff.py changes.arrow~ changes.arrow

      - name: Print diff
        run: |
          python print_table_diff.py latest_changes.arrow~ latest_changes.arrow

      - name: Upload to S3
        run: |
          aws s3 cp "changes.arrow" "s3://wikidatabots/tmdb/${TYPE}/changes.arrow"
          aws s3 cp "latest_changes.arrow" "s3://wikidatabots/tmdb/${TYPE}/latest_changes.arrow"
        env:
          TYPE: ${{ matrix.type }}

  external_ids:
    needs: changes
    runs-on: ubuntu-latest
    concurrency: tmdb_external_ids_${{ matrix.type }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "movie"
          - type: "tv"
          - type: "person"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >>"$GITHUB_ENV"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Download from S3
        run: |
          aws s3 cp "s3://wikidatabots/tmdb/${TYPE}/latest_changes.arrow" "latest_changes.arrow"
          aws s3 cp "s3://wikidatabots/tmdb/${TYPE}/external_ids.arrow" "external_ids.arrow"
          cp external_ids.arrow external_ids.arrow~
        env:
          TYPE: ${{ matrix.type }}

      - name: Run ETL outdated script
        shell: python
        run: |
          import os

          import pandas as pd

          from tmdb_etl import insert_tmdb_external_ids, tmdb_outdated_external_ids

          tmdb_type = os.environ["TYPE"]
          latest_changes_df = pd.read_feather("latest_changes.arrow").set_index("id")
          external_ids_df = pd.read_feather("external_ids.arrow").set_index("id")
          tmdb_ids = tmdb_outdated_external_ids(
              latest_changes_df=latest_changes_df,
              external_ids_df=external_ids_df,
          )
          external_ids_df = insert_tmdb_external_ids(
              external_ids_df,
              tmdb_type=tmdb_type,
              tmdb_ids=tmdb_ids,
          )
          external_ids_df.reset_index().to_feather("external_ids.arrow")
        env:
          TYPE: ${{ matrix.type }}
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

      - name: Run ETL backfill script
        shell: python
        run: |
          import os

          import pandas as pd

          from tmdb_etl import insert_tmdb_external_ids, tmdb_external_ids_need_backfill

          tmdb_type = os.environ["TYPE"]
          external_ids_df = pd.read_feather("external_ids.arrow").set_index("id")
          tmdb_ids = tmdb_external_ids_need_backfill(external_ids_df=external_ids_df)
          external_ids_df = insert_tmdb_external_ids(
              external_ids_df,
              tmdb_type=tmdb_type,
              tmdb_ids=tmdb_ids,
          )
          external_ids_df.reset_index().to_feather("external_ids.arrow")
        env:
          TYPE: ${{ matrix.type }}
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

      - name: Print stats
        run: |
          python print_table_stats.py external_ids.arrow

      - name: Print diff
        run: |
          python print_table_diff.py external_ids.arrow~ external_ids.arrow id

      - name: Upload to S3
        run: |
          aws s3 cp "external_ids.arrow" "s3://wikidatabots/tmdb/${TYPE}/external_ids.arrow"
        env:
          TYPE: ${{ matrix.type }}
