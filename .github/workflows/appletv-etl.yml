name: Apple TV ETL

on:
  schedule:
    - cron: "0 16 * * 1"
    - cron: "0 1,9,17 * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  sitemap:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 16 * * 1' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "movie"
          - type: "show"

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >>"$GITHUB_ENV"

      - name: Load cache
        uses: actions/cache@v3
        with:
          path: .cache/
          key: cache-${{ github.job }}-${{ matrix.type }}-${{ github.run_id }}
          restore-keys: |
            cache-${{ github.job }}-${{ matrix.type }}-

      - name: Download from S3
        run: |
          aws s3 cp "s3://wikidatabots/appletv/${TYPE}/sitemap.arrow" "sitemap.arrow"
          cp sitemap.arrow sitemap.arrow~
        env:
          TYPE: ${{ matrix.type }}

      - name: Fetch sitemaps changes
        shell: python
        run: |
          import os

          from appletv_etl import main_sitemap

          main_sitemap(os.environ["TYPE"])
        env:
          TYPE: ${{ matrix.type }}

      - name: Print stats
        run: |
          python print_table_stats.py sitemap.arrow | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Print diff
        run: |
          python print_table_diff.py sitemap.arrow~ sitemap.arrow loc

      - name: Convert to Parquet
        run: |
          python arrow2parquet.py sitemap.arrow sitemap.parquet

      - name: Upload to S3
        run: |
          aws s3 cp --acl public-read "sitemap.arrow" "s3://wikidatabots/appletv/${TYPE}/sitemap.arrow"
          aws s3 cp --acl public-read "sitemap.parquet" "s3://wikidatabots/appletv/${TYPE}/sitemap.parquet"
        env:
          TYPE: ${{ matrix.type }}

  jsonld:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 1,9,17 * * *' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "movie"
          - type: "show"

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >>"$GITHUB_ENV"

      - name: Download from S3
        run: |
          aws s3 cp "s3://wikidatabots/appletv/${TYPE}/sitemap.arrow" "sitemap.arrow"
          aws s3 cp "s3://wikidatabots/appletv/${TYPE}/jsonld.arrow" "jsonld.arrow"
          cp jsonld.arrow jsonld.arrow~
        env:
          TYPE: ${{ matrix.type }}

      - name: Run script
        shell: python
        run: |
          from appletv_etl import main_jsonld

          main_jsonld()

      - name: Print stats
        run: |
          python print_table_stats.py jsonld.arrow | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Print diff
        run: |
          python print_table_diff.py jsonld.arrow~ jsonld.arrow loc

      - name: Convert to Parquet
        run: |
          python arrow2parquet.py jsonld.arrow jsonld.parquet

      - name: Upload to S3
        run: |
          aws s3 cp --acl public-read "jsonld.arrow" "s3://wikidatabots/appletv/${TYPE}/jsonld.arrow"
          aws s3 cp --acl public-read "jsonld.parquet" "s3://wikidatabots/appletv/${TYPE}/jsonld.parquet"
        env:
          TYPE: ${{ matrix.type }}
